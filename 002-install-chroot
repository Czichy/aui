#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#Contribution: flexiondotorg
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

load_script "100-display-manager-and-desktop"
load_script "110-install-sound"
load_script "130-install-printers"
load_script "140-install-samba"
load_script "200-install-system-tools"
load_script "600-install-Arco"
load_script "700-installing-fonts"

#ARCHLINUX U INSTALL {{{
#1 - WELCOME {{{
welcome(){
  clear
  echo -e "${Bold}Welcome to the Archlinux U Install script"
  print_line
  echo "Requirements:"
  echo "-> Archlinux installation"
  echo "-> Run script as root user"
  echo "-> Working internet connection"
  print_line
  echo "Script can be cancelled at any time with CTRL+C"
  print_line
  echo "http://www.github.com/helmuthdu/aui"
  print_line
  echo -e "\nBackups:"
  print_line
  # backup old configs
  [[ ! -f /etc/pacman.conf.aui ]] && cp -v /etc/pacman.conf /etc/pacman.conf.aui || echo "/etc/pacman.conf.aui";
  [[ -f /etc/ssh/sshd_config.aui ]] && echo "/etc/ssh/sshd_conf.aui";
  [[ -f /etc/sudoers.aui ]] && echo "/etc/sudoers.aui";
  pause_function
  echo ""
}
#}}}
#LOCALE SELECTOR {{{
language_selector(){
  #AUTOMATICALLY DETECTS THE SYSTEM LOCALE {{{
  #automatically detects the system language based on your locale
  LOCALE=de_DE#`locale | grep LANG | sed 's/LANG=//' | cut -c1-5`
  #KDE #{{{
    LOCALE_KDE=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #FIREFOX #{{{
    LOCALE_FF=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #THUNDERBIRD #{{{
  LOCALE_TB=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #HUNSPELL #{{{
  LOCALE_HS=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #ASPELL #{{{
  LOCALE_AS=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #LIBREOFFICE #{{{
    LOCALE_LO=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #}}}
}
#}}}
#12 - SELECT/CREATE USER {{{
select_user(){
  #CREATE NEW USER {{{
  create_new_user(){
    read -p "Username: " username
    username=`echo $username | tr '[:upper:]' '[:lower:]'`
    useradd -m -g users -G wheel -s /bin/bash ${username}
    chfn ${username}
    passwd ${username}
    while [[ $? -ne 0 ]]; do
      passwd ${username}
    done
    pause_function
    configure_user_account
  }
  #}}}
  #CONFIGURE USER ACCOUNT {{{
  configure_user_account(){
    #BASHRC {{{
    print_title "BASHRC - https://wiki.archlinux.org/index.php/Bashrc"
    bashrc_list=("Get helmuthdu .bashrc from github" "Vanilla .bashrc" "Get personal .bashrc from github");
    PS3="$prompt1"
    echo -e "Choose your .bashrc\n"
    select OPT in "${bashrc_list[@]}"; do
      case "$REPLY" in
        1)
          package_install "git"
          package_install "colordiff"
          git clone https://github.com/helmuthdu/dotfiles
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc ~/
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc /home/${username}/
          rm -fr dotfiles
          ;;
        2)
          cp /etc/skel/.bashrc /home/${username}
          ;;
        3)
          package_install "git"
          read -p "Enter your github username [ex: helmuthdu]: " GITHUB_USER
          read -p "Enter your github repository [ex: aui]: " GITHUB_REPO
          git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
          cp -R $GITHUB_REPO/.* /home/${username}/
          rm -fr $GITHUB_REPO
          ;;
        *)
          invalid_option
          ;;
      esac
      [[ -n $OPT ]] && break
    done
    #}}}
    #EDITOR {{{
    print_title "DEFAULT EDITOR"
    editors_list=("emacs" "nano" "vi" "vim" "neovim" "zile");
    PS3="$prompt1"
    echo -e "Select editor\n"
    select EDITOR in "${editors_list[@]}"; do
      if contains_element "$EDITOR" "${editors_list[@]}"; then
        if [[ $EDITOR == vim || $EDITOR == neovim ]]; then
          [[ $EDITOR == vim ]] && (! is_package_installed "gvim" && package_install "vim ctags") || package_install "neovim python2-neovim python-neovim"
          #VIMRC {{{
          if [[ ! -f /home/${username}/.vimrc ]]; then
            vimrc_list=("Get helmuthdu .vimrc from github" "Vanilla .vimrc" "Get personal .vimrc from github");
            PS3="$prompt1"
            echo -e "Choose your .vimrc\n"
            select OPT in "${vimrc_list[@]}"; do
              case "$REPLY" in
                1)
                  package_install "git"
                  git clone https://github.com/helmuthdu/vim /home/${username}/.vim
                  ln -sf /home/${username}/.vim/vimrc /home/${username}/.vimrc
                  cp -R vim /home/${username}/.vim/fonts /home/${username}/.fonts
                  GRUVBOX_NEEDED=1
                  ;;
                3)
                  package_install "git"
                  read -p "Enter your github username [ex: helmuthdu]: " GITHUB_USER
                  read -p "Enter your github repository [ex: vim]: " GITHUB_REPO
                  git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
                  cp -R $GITHUB_REPO/.vim /home/${username}/
                  if [[ -f $GITHUB_REPO/vimrc ]]; then
                    ln -sf /home/${username}/.vim/vimrc /home/${username}/.vimrc
                  else
                    ln -sf /home/${username}/.vim/.vimrc /home/${username}/.vimrc
                  fi
                  rm -fr $GITHUB_REPO
                  ;;
                2)
                  echo "Nothing to do..."
                  ;;
                *)
                  invalid_option
                  ;;
              esac
              [[ -n $OPT ]] && break
            done
          fi
          if [[ $EDITOR == neovim  && ! -f /home/${username}/.config/nvim ]]; then
            mkdir ~/.config
            ln -s ~/.vim ~/.config/nvim
            ln -s ~/.vimrc ~/.config/nvim/init.vim
          fi
          #}}}
        else
          package_install "$EDITOR"
        fi
        break
      else
        invalid_option
      fi
    done
    #}}}
    chown -R ${username}:users /home/${username}
  }
  #}}}
  print_title "SELECT/CREATE USER - https://wiki.archlinux.org/index.php/Users_and_Groups"
  users_list=(`cat /etc/passwd | grep "/home" | cut -d: -f1`);
  PS3="$prompt1"
  echo "Avaliable Users:"
  if [[ $(( ${#users_list[@]} )) -gt 0 ]]; then
    print_warning "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES"
  else
    echo ""
  fi
  select OPT in "${users_list[@]}" "Create new user"; do
    if [[ $OPT == "Create new user" ]]; then
      create_new_user
    elif contains_element "$OPT" "${users_list[@]}"; then
      username=$OPT
    else
      invalid_option
    fi
    [[ -n $OPT ]] && break
  done
  [[ ! -f /home/${username}/.bashrc ]] && configure_user_account;
  if [[ -n "$http_proxy" ]]; then
      echo "proxy = $http_proxy" > /home/${username}/.curlrc
      chown ${username}:users /home/${username}/.curlrc
  fi
}
#}}}
#11 -CONFIGURE SUDO {{{
configure_sudo(){
  if ! is_package_installed "sudo" ; then
    print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
    package_install "sudo"
  fi
  #CONFIGURE SUDOERS {{{
  if [[ ! -f  /etc/sudoers.aui ]]; then
    cp -v /etc/sudoers /etc/sudoers.aui
    ## Uncomment to allow members of group wheel to execute any command
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
    ## Same thing without a password (not secure)
    #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers

    #This config is especially helpful for those using terminal multiplexers like screen, tmux, or ratpoison, and those using sudo from scripts/cronjobs:
    echo "" >> /etc/sudoers
    echo 'Defaults !requiretty, !tty_tickets, !umask' >> /etc/sudoers
    echo 'Defaults visiblepw, path_info, insults, lecture=always' >> /etc/sudoers
    echo 'Defaults loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, syslog=auth' >> /etc/sudoers
    echo 'Defaults passwd_tries=3, passwd_timeout=1' >> /etc/sudoers
    echo 'Defaults env_reset, always_set_home, set_home, set_logname' >> /etc/sudoers
    echo 'Defaults !env_editor, editor="/usr/bin/vim:/usr/bin/vi:/usr/bin/nano"' >> /etc/sudoers
    echo 'Defaults timestamp_timeout=15' >> /etc/sudoers
    echo 'Defaults passprompt="[sudo] password for %u: "' >> /etc/sudoers
    echo 'Defaults lecture=never' >> /etc/sudoers
  fi
  #}}}
}
#}}}
#AUR HELPER {{{
choose_aurhelper(){
  print_title "AUR HELPER - https://wiki.archlinux.org/index.php/AUR_Helpers"
  print_info "AUR Helpers are written to make using the Arch User Repository more comfortable."
  print_warning "\tNone of these tools are officially supported by Arch devs."
          print_title "YAOURT - https://wiki.archlinux.org/index.php/Yaourt"
        print_info "Yaourt (Yet AnOther User Repository Tool) is a community-contributed wrapper for pacman which adds seamless access to the AUR, allowing and automating package compilation and installation from your choice of the thousands of PKGBUILDs in the AUR, in addition to the many thousands of available Arch Linux binary packages."
        if ! is_package_installed "yaourt" ; then
          package_install "base-devel yajl namcap"
          pacman -D --asdeps yajl namcap
          aui_download_packages "package-query yaourt"
          pacman -D --asdeps package-query
          if ! is_package_installed "yaourt" ; then
            echo "Yaourt not installed. EXIT now"
            pause_function
            exit 0
          fi
        fi
        AUR_PKG_MANAGER="yaourt --tmp /var/tmp/"
}
#}}}
#CUSTOM REPOSITORIES {{{
add_custom_repositories(){
    print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
    echo '#[arcolinux_repo_testing]
    #SigLevel = Required DatabaseOptional
    #Server = https://arcolinux.github.io/arcolinux_repo_testing/$arch
    [arcolinux_repo]
    SigLevel = Required DatabaseOptional
    Server = https://arcolinux.github.io/arcolinux_repo/$arch' | sudo tee --append /etc/pacman.conf
}
#}}}
#BASIC SETUP {{{
install_basic_setup(){
  print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
  package_install "bc rsync mlocate bash-completion pkgstats arch-wiki-lite"
 # pause_function
  print_title "(UN)COMPRESS TOOLS - https://wiki.archlinux.org/index.php/P7zip"
  package_install "zip unzip unrar p7zip lzop cpio"
 # pause_function
  print_title "AVAHI - https://wiki.archlinux.org/index.php/Avahi"
  print_info "Avahi is a free Zero Configuration Networking (Zeroconf) implementation, including a system for multicast DNS/DNS-SD discovery. It allows programs to publish and discovers services and hosts running on a local network with no specific configuration."
  package_install "avahi nss-mdns"
  is_package_installed "avahi" && system_ctl enable avahi-daemon
 # pause_function
  print_title "NTFS/FAT/exFAT/F2FS - https://wiki.archlinux.org/index.php/File_Systems"
  print_info "A file system (or filesystem) is a means to organize data expected to be retained after a program terminates by providing procedures to store, retrieve and update data, as well as manage the available space on the device(s) which contain it. A file system organizes data in an efficient manner and is tuned to the specific characteristics of the device."
  package_install "ntfs-3g dosfstools exfat-utils f2fs-tools fuse fuse-exfat autofs mtpfs"
  #pause_function
}
#}}}
#SSH {{{
install_ssh(){
  print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
  print_info "Secure Shell (SSH) is a network protocol that allows data to be exchanged over a secure channel between two computers."
    package_install "openssh"
    system_ctl enable sshd
    [[ ! -f /etc/ssh/sshd_config.aui ]] && cp -v /etc/ssh/sshd_config /etc/ssh/sshd_config.aui;
    #CONFIGURE SSHD_CONF #{{{
      sed -i '/Port 22/s/^#//' /etc/ssh/sshd_config
      sed -i '/Protocol 2/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_rsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_dsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/KeyRegenerationInterval/s/^#//' /etc/ssh/sshd_config
      sed -i '/ServerKeyBits/s/^#//' /etc/ssh/sshd_config
      sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
      sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
      sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostbasedAuthentication no/s/^#//' /etc/ssh/sshd_config
      sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
      sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding no/d' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
      sed -i -e '/\tX11Forwarding yes/d' /etc/ssh/sshd_config
      sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
      sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
      sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
      sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
      sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
    #}}}
}
#}}}
#NFS {{{
install_nfs(){
  print_title "NFS - https://wiki.archlinux.org/index.php/Nfs"
  print_info "NFS allowing a user on a client computer to access files over a network in a manner similar to how local storage is accessed."
    package_install "nfs-utils"
    system_ctl enable rpcbind
    system_ctl enable nfs-client.target
    system_ctl enable remote-fs.target
}
#}}}
#ZSH {{{
install_zsh(){
  print_title "ZSH - https://wiki.archlinux.org/index.php/Zsh"
  print_info "Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter. "
    package_install "zsh"
      if [[ -f /home/${username}/.zshrc ]]; then
          run_as_user "mv /home/${username}/.zshrc /home/${username}/.zshrc.bkp"
          run_as_user "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\""
          run_as_user "$EDITOR /home/${username}/.zshrc"
      else
        run_as_user "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\""
        run_as_user "$EDITOR /home/${username}/.zshrc"
      fi
}
#}}}
#READAHEAD {{{
enable_readahead(){
  print_title "Readahead - https://wiki.archlinux.org/index.php/Improve_Boot_Performance"
  print_info "Systemd comes with its own readahead implementation, this should in principle improve boot time. However, depending on your kernel version and the type of your hard drive, your mileage may vary (i.e. it might be slower)."
    system_ctl enable systemd-readahead-collect
    system_ctl enable systemd-readahead-replay
}
#}}}
#ZRAM {{{
install_zram (){
  print_title "ZRAM - https://wiki.archlinux.org/index.php/Maximizing_Performance"
  print_info "Zram creates a device in RAM and compresses it. If you use for swap means that part of the RAM can hold much more information but uses more CPU. Still, it is much quicker than swapping to a hard drive. If a system often falls back to swap, this could improve responsiveness. Zram is in mainline staging (therefore its not stable yet, use with caution)."
    aur_package_install "zramswap"
    system_ctl enable zramswap
}
#}}}
#TLP {{{
install_tlp(){
  print_title "TLP - https://wiki.archlinux.org/index.php/Tlp"
  print_info "TLP is an advanced power management tool for Linux. It is a pure command line tool with automated background tasks and does not contain a GUI."
    package_install "tlp"
    system_ctl enable tlp
    system_ctl enable tlp-sleep
    system_ctl disable systemd-rfkill
    tlp start
}
#}}}
#XORG {{{
install_xorg(){
  print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
  print_info "Xorg is the public, open-source implementation of the X window system version 11."
  echo "Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)"
  package_install "xorg-server xorg-apps xorg-server-xwayland xorg-xinit xorg-xkill xorg-xinput xf86-input-libinput"
  package_install "mesa"
  modprobe uinput
}
#}}}
#FONT CONFIGURATION {{{
font_config(){
  print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
  print_info "Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered."
    pacman -S --asdeps --needed cairo fontconfig freetype2
}
#}}}
#VIDEO CARDS {{{
create_ramdisk_environment(){
  if [ "$(ls /boot | grep hardened -c)" -gt "0" ]; then
    mkinitcpio -p linux-hardened
  elif [ "$(ls /boot | grep lts -c)" -gt "0" ]; then
    mkinitcpio -p linux-lts
  else
    mkinitcpio -p linux
  fi
}
install_video_cards(){
  package_install "dmidecode"
  print_title "VIDEO CARD"
  check_vga
  #Virtualbox {{{
  if [[ ${VIDEO_DRIVER} == virtualbox ]]; then
    if [ "$(ls /boot | grep hardened -c)" -gt "0" ] || [ "$(ls /boot | grep lts -c)" -gt "0" ]; then
      package_install "virtualbox-guest-dkms virtualbox-guest-utils mesa-libgl"
    else
      package_install "virtualbox-guest-modules-arch virtualbox-guest-utils mesa-libgl"
    fi
    add_module "vboxguest vboxsf vboxvideo" "virtualbox-guest"
    add_user_to_group ${username} vboxsf
    system_ctl disable ntpd
    system_ctl enable vboxservice
    create_ramdisk_environment
  #}}}
  #VMware {{{
  elif [[ ${VIDEO_DRIVER} == vmware ]]; then
    package_install "xf86-video-vmware xf86-input-vmmouse"
    if [ "$(ls /boot | grep hardened -c)" -gt "0" ] || [ "$(ls /boot | grep lts -c)" -gt "0" ]; then
      aur_package_install "open-vm-tools-dkms"
    else
      package_install "open-vm-tools"
    fi
    cat /proc/version > /etc/arch-release
    system_ctl disable ntpd
    system_ctl enable vmtoolsd
    create_ramdisk_environment
  #}}}
  #Bumblebee {{{
  elif [[ ${VIDEO_DRIVER} == bumblebee ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    pacman -S --needed xf86-video-intel bumblebee nvidia
    [[ ${ARCHI} == x86_64 ]] && pacman -S --needed lib32-virtualgl lib32-nvidia-utils
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    create_ramdisk_environment
    add_user_to_group ${username} bumblebee
  #}}}
  #NVIDIA {{{
  elif [[ ${VIDEO_DRIVER} == nvidia ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    if [ "$(ls /boot | grep hardened -c)" -gt "0" ] || [ "$(ls /boot | grep lts -c)" -gt "0" ]; then
      package_install "nvidia-dkms nvidia-utils libglvnd"
      echo "Do not forget to make a mkinitcpio every time you updated the nvidia driver!"
    else
      package_install "nvidia nvidia-utils libglvnd"
    fi
    [[ ${ARCHI} == x86_64 ]] && pacman -S --needed lib32-nvidia-utils
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    create_ramdisk_environment
    nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
  #}}}
  #Nouveau [NVIDIA] {{{
  elif [[ ${VIDEO_DRIVER} == nouveau ]]; then
    is_package_installed "nvidia" && pacman -Rdds --noconfirm nvidia{,-utils}
    [[ ${ARCHI} == x86_64 ]] && is_package_installed "lib32-nvidia-utils" && pacman -Rdds --noconfirm lib32-nvidia-utils
    [[ -f /etc/X11/xorg.conf.d/20-nvidia.conf ]] && rm /etc/X11/xorg.conf.d/20-nvidia.conf
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl libvdpau-va-gl"
    replace_line '#*options nouveau modeset=1' 'options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '#*MODULES="nouveau"' 'MODULES="nouveau"' /etc/mkinitcpio.conf
    create_ramdisk_environment
  #}}}
  #ATI {{{
  elif [[ ${VIDEO_DRIVER} == ati ]]; then
    is_package_installed "catalyst-total" && pacman -Rdds --noconfirm catalyst-total
    [[ -f /etc/X11/xorg.conf.d/20-radeon.conf ]] && rm /etc/X11/xorg.conf.d/20-radeon.conf
    [[ -f /etc/modules-load.d/catalyst.conf ]] && rm /etc/modules-load.d/catalyst.conf
    [[ -f /etc/X11/xorg.conf ]] && rm /etc/X11/xorg.conf
    if [ "$(ls /boot | grep hardened -c)" -gt "0" ] || [ "$(ls /boot | grep lts -c)" -gt "0" ]; then
      aur_package_install "catalyst-total"
     else
       package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl mesa-vdpau libvdpau-va-gl"
      add_module "radeon" "ati"
    fi
    create_ramdisk_environment
  #}}}
  #Intel {{{
  elif [[ ${VIDEO_DRIVER} == intel ]]; then
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl libvdpau-va-gl"
  #}}}
  #Vesa {{{
  else
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl libvdpau-va-gl"
  fi
  #}}}
  if [[ ${ARCHI} == x86_64 ]]; then
    is_package_installed "mesa-libgl" && package_install "lib32-mesa-libgl"
    is_package_installed "mesa-vdpau" && package_install "lib32-mesa-vdpau"
  fi
  if is_package_installed "libvdpau-va-gl"; then
    add_line "export VDPAU_DRIVER=va_gl" "/etc/profile"
  fi
  #pause_function
}
#}}}
#ADDITIONAL FIRMWARE {{{
install_additional_firmwares(){
  print_title "INSTALL ADDITIONAL FIRMWARES"
  read_input_text "Install additional firmwares [Audio,Bluetooth,Scanner,Wireless]" $FIRMWARE
    while true
    do
      print_title "INSTALL ADDITIONAL FIRMWARES"
      echo " 1) $(menu_item "aic94xx-firmware") $AUR"
      echo " 2) $(menu_item "alsa-firmware")"
      echo " 3) $(menu_item "b43-firmware") $AUR"
      echo " 4) $(menu_item "b43-firmware-legacy") $AUR"
      echo " 5) $(menu_item "bfa-firmware") $AUR"
      echo " 6) $(menu_item "bluez-firmware") [Broadcom BCM203x/STLC2300 Bluetooth]"
      echo " 7) $(menu_item "broadcom-wl-dkms")"
      echo " 8) $(menu_item "ipw2100-fw")"
      echo " 9) $(menu_item "ipw2200-fw")"
      echo "10) $(menu_item "libffado") [Fireware Audio Devices]"
      echo "11) $(menu_item "libmtp") [Android Devices]"
      echo "12) $(menu_item "libraw1394") [IEEE1394 Driver]"
      echo ""
      echo " d) DONE"
      echo ""
      FIRMWARE_OPTIONS+=" d"
      read_input_options "$FIRMWARE_OPTIONS"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            aur_package_install "aic94xx-firmware"
            ;;
          2)
            package_install "alsa-firmware"
            ;;
          3)
            aur_package_install "b43-firmware"
            ;;
          4)
            aur_package_install "b43-firmware-legacy"
            ;;
          5)
            aur_package_install "bfa-firmware"
            ;;
          6)
            package_install "bluez-firmware"
            ;;
          7)
            package_install "broadcom-wl-dkms"
            ;;
          8)
            package_install "ipw2100-fw"
            ;;
          9)
            package_install "ipw2200-fw"
            ;;
          10)
            package_install "libffado"
            ;;
          11)
            package_install "libmtp"
            package_install "android-udev"
            ;;
          12)
            package_install "libraw1394"
            ;;
          "d")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      source sharedfuncs_elihw
      create_ramdisk_environment
    done
}
#}}}
#CONNMAN/NETWORKMANAGER/WICD {{{
install_nm_wicd(){
  print_title "NETWORK MANAGER"
      print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
      print_info "NetworkManager is a program for providing detection and configuration for systems to automatically connect to network. NetworkManager's functionality can be useful for both wireless and wired networks."
      if [[ ${KDE} -eq 1 ]]; then
        package_install "networkmanager dnsmasq plasma-nm networkmanager-qt"
      else
        package_install "networkmanager dnsmasq network-manager-applet nm-connection-editor gnome-keyring"
      fi
      # vpn support
      package_install "networkmanager-openconnect networkmanager-openvpn networkmanager-pptp networkmanager-vpnc"
      # auto update datetime from network
      if is_package_installed "ntp"; then
        package_install "networkmanager-dispatcher-ntpd"
        system_ctl enable NetworkManager-dispatcher.service
      fi
      # power manager support
      is_package_installed "tlp" && package_install "tlp-rdw"
      # network management daemon
      system_ctl enable NetworkManager.service
}
#}}}
#ACCESSORIES {{{
install_accessories_apps(){
         package_install "catfish"
         aur_package_install "conky-lua"
         package_install "lm_sensors"
         sensors-detect --auto
         package_install "docky"
         aur_package_install "dockmanager"
         package_install "galculator"
         aur_package_install "pamac-aur"
         aur_package_install "pyrenamer"
         aur_package_install "enpass-bin"
         if [[ ${KDE} -eq 1 ]]; then
            aur_package_install "hotshots"
          else
            aur_package_install "shutter"
          fi
         package_install "synapse"
         aur_package_install "tilix-bin"
         package_install "terminator"
         aur_package_install "unified-remote-server"
         system_ctl enable urserver
}
#}}}
#DEVELOPEMENT {{{
install_development_apps(){
         aur_package_install "qtwebkit-bin"
         package_install "atom"
         package_install "emacs"
         package_remove "vim"
         package_install "gvim ctags"
         package_install "meld"
         aur_package_install "sublime-text2"
         aur_package_install "sublime-text-dev"
         aur_package_install "android-sdk android-sdk-platform-tools android-sdk-build-tools android-platform"
          add_user_to_group ${username} sdkusers
          chown -R :sdkusers /opt/android-sdk/
          chmod -R g+w /opt/android-sdk/
          add_line "export ANDROID_HOME=/opt/android-sdk" "/home/${username}/.bashrc"
          aur_package_install "android-studio"
         package_install "intellij-idea-community-edition"
         #package_install "qtcreator"
         aur_package_install "mysql-workbench"
         #package_remove "jdk"
         #package_install "jdk8-openjdk"
         #package_remove "jdk"
         #package_install "jdk9-openjdk"
         #package_remove "jdk"
         #package_install "jdk10-openjdk"
         #package_remove "jre{7,8,9,10}-openjdk"
         #package_remove "jdk{7,8,9,10}-openjdk"
         aur_package_install "jdk"
         package_install "nodejs"
         aur_package_install "visual-studio-code-bin"
         aur_package_install "gitg"
         aur_package_install "qgit"
         aur_package_install "kdiff3"
         aur_package_install "regexxer"
}
#}}}
#OFFICE {{{
install_office_apps(){
          if [[ ${KDE} -eq 1 ]]; then
            package_install "calligra"
          else
            package_install "gnumeric abiword abiword-plugins"
          fi
          package_install "hunspell hunspell-$LOCALE_HS"
          package_install "aspell aspell-$LOCALE_AS"
          package_install "calibre"
          package_install "gcstar"
          aur_package_install "geeknote-git"
          aur_package_install "haroopad"
          #package_install "homebank"
          package_install "impressive"
          package_install "texlive-most"
          if [[ ${KDE} -eq 0 ]]; then
            package_install "gummi"
          fi
          print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
          package_install "libreoffice-fresh"
          [[ $LOCALE != en_US ]] && package_install "libreoffice-fresh-$LOCALE_LO"
          package_install "hunspell hunspell-$LOCALE_HS"
          package_install "aspell aspell-$LOCALE_AS"
          package_install "ocrfeeder tesseract gocr"
          package_install "aspell aspell-$LOCALE_AS"
          package_install "xmind"
          package_install "goldendict"
}
#}}}

#GRAPHICS {{{
install_graphics_apps(){
    print_title "GRAPHICS APPS"
    	#package_install "blender"
    	package_install "gimp"
    	#package_install "gthumb"
        package_install "inkscape python2-numpy python-lxml"
        #package_install "mcomix"
        #package_install "mypaint"
        #aur_package_install "pencil"
        #package_install "scribus"
        #package_install "shotwell"
        package_install "simple-scan"
}
#}}}
#INTERNET {{{
install_internet_apps(){
    print_title "INTERNET APPS"
            print_title "BROWSER"
            	  aur_package_install "google-chrome"
                  package_install "chromium"
                  package_install "firefox firefox-i18n-$LOCALE_FF"
                  aur_package_install "vivaldi"
            print_title "DOWNLOAD|FILESHARE"
            	  aur_package_install "aerofs"
                  aur_package_install "rslsync"
                  package_install "deluge"
                  aur_package_install "dropbox"
                  aur_package_install "flareget"
                  aur_package_install "jdownloader"
                  package_install "qbittorrent"
                  package_install "sparkleshare"
                  aur_package_install "spideroak"
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "transmission-qt"
                  else
                    package_install "transmission-gtk"
                  fi
                  if [[ -f /home/${username}/.config/transmission/settings.json ]]; then
                    replace_line '"blocklist-enabled": false' '"blocklist-enabled": true' /home/${username}/.config/transmission/settings.json
                    replace_line "www\.example\.com\/blocklist" "list\.iblocklist\.com\/\?list=bt_level1&fileformat=p2p&archiveformat=gz" /home/${username}/.config/transmission/settings.json
                  fi
                  package_install "uget"
                  package_install "youtube-dl"
                  aur_package_install "tixati"
                  aur_package_install "google-drive-ocamlfuse"
            print_title "MAPPING TOOLS"
                  aur_package_install "google-earth"
            print_title "DESKTOP SHARE"
                  aur_package_install "teamviewer"
}
#}}}
#AUDIO {{{
install_audio_apps(){
    print_title "AUDIO APPS"
            print_title "AUDIO PLAYERS"
            echo " 1) $(menu_item "amarok")"
            echo " 2) $(menu_item "audacious")"
            echo " 3) $(menu_item "banshee") $AUR"
            echo " 4) $(menu_item "clementine")"
            echo " 5) $(menu_item "deadbeef")"
            echo " 6) $(menu_item "guayadeque") $AUR"
            echo " 7) $(menu_item "musique") $AUR"
            echo " 8) $(menu_item "nuvolaplayer-git") $AUR"
            echo " 9) $(menu_item "pragha")"
            echo "10) $(menu_item "radiotray") $AUR"
            echo "11) $(menu_item "rhythmbox")"
            echo "12) $(menu_item "spotify") $AUR"
            echo "13) $(menu_item "timidity++") $AUR"
            echo "14) $(menu_item "tomahawk") $AUR"
            echo "15) $(menu_item "quodlibet")"
            echo ""
            echo " b) BACK"
            echo ""
                  package_install "amarok"
                  package_install "audacious audacious-plugins"
                  aur_package_install "banshee"
                  package_install "clementine"
                  package_install "deadbeef"
                  aur_package_install "guayadeque"
                  aur_package_install "musique"
                  aur_package_install "nuvolaplayer-git"
                  package_install "pragha"
                  aur_package_install "radiotray"
                  package_install "rhythmbox grilo grilo-plugins libgpod libdmapsharing gnome-python python-mako"
                  #aur_package_install "pywebkitgtk"
                  # pywebkitgtk compile needed and take alot of time around 4-5H on i5-8gigram-ssd hdd
                  # + only need when Cannot activate "context pane" plugin
                  aur_package_install "spotify"
                  aur_package_install "timidity++ fluidr3"
                  echo -e 'soundfont /usr/share/soundfonts/fluidr3/FluidR3GM.SF2' >> /etc/timidity++/timidity.cfg
                  aur_package_install "tomahawk"
                  package_install "quodlibet"
                  
}
#}}}
#VIDEO {{{
install_video_apps(){
    print_title "VIDEO APPS"
          #PLAYERS {{{
            print_title "VIDEO PLAYERS"
                  package_install "gnome-mplayer"
                  package_install "livestreamer"
                  package_install "minitube"
                  aur_package_install "miro"
                  package_install "mpv"
                  package_install "vlc"
                  #[[ ${KDE} -eq 1 ]] && package_install "phonon-qt5-vlc"
                  package_install "kodi"
                  add_user_to_group ${username} kodi
                  package_install "obs-studio-git"
            
}
#}}}
#WEBSERVER {{{
install_web_server(){
  install_adminer(){ #{{{
    aur_package_install "adminer"
    local ADMINER=`cat /etc/httpd/conf/httpd.conf | grep Adminer`
    [[ -z $ADMINER ]] && echo -e '\n# Adminer Configuration\nInclude conf/extra/httpd-adminer.conf' >> /etc/httpd/conf/httpd.conf
  } #}}}
  install_mariadb(){ #{{{
    package_install "mariadb"
    /usr/bin/mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
    system_ctl enable mysqld.service
    systemctl start mysqld.service
    /usr/bin/mysql_secure_installation
  } #}}}
  install_postgresql(){ #{{{
    package_install "postgresql"
    mkdir -p /var/lib/postgres
    chown -R postgres:postgres /var/lib/postgres
    systemd-tmpfiles --create postgresql.conf
    echo "Enter your new postgres account password:"
    passwd postgres
    while [[ $? -ne 0 ]]; do
      passwd postgres
    done
    su - postgres -c "initdb --locale ${LOCALE}.UTF-8 -D /var/lib/postgres/data"
    system_ctl enable postgresql.service
    system_ctl start postgresql.service
    read_input_text "Install Postgis + Pgrouting" $POSTGIS
    [[ $OPTION == y ]] && install_gis_extension
  } #}}}
  install_gis_extension(){ #{{{
    package_install "postgis"
    aur_package_install "pgrouting"
  } #}}}
  configure_php(){ #{{{
    if [[ -f /etc/php/php.ini.pacnew ]]; then
      mv -v /etc/php/php.ini /etc/php/php.ini.pacold
      mv -v /etc/php/php.ini.pacnew /etc/php/php.ini
      rm -v /etc/php/php.ini.aui
    fi
    [[ -f /etc/php/php.ini.aui ]] && echo "/etc/php/php.ini.aui" || cp -v /etc/php/php.ini /etc/php/php.ini.aui
    if [[ $1 == mariadb ]]; then
      sed -i '/mysqli.so/s/^;//' /etc/php/php.ini
      sed -i '/mysql.so/s/^;//' /etc/php/php.ini
      sed -i '/skip-networking/s/^/#/' /etc/mysql/my.cnf
    else
      sed -i '/pgsql.so/s/^;//' /etc/php/php.ini
    fi
    sed -i '/mcrypt.so/s/^;//' /etc/php/php.ini
    sed -i '/gd.so/s/^;//' /etc/php/php.ini
    sed -i '/display_errors=/s/off/on/' /etc/php/php.ini
  } #}}}
  configure_php_apache(){ #{{{
    if [[ -f /etc/httpd/conf/httpd.conf.pacnew ]]; then
      mv -v /etc/httpd/conf/httpd.conf.pacnew /etc/httpd/conf/httpd.conf
      rm -v /etc/httpd/conf/httpd.conf.aui
    fi
    [[ -f /etc/httpd/conf/httpd.conf.aui ]] && echo "/etc/httpd/conf/httpd.conf.aui" || cp -v /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.aui
    local IS_DISABLED=`cat /etc/httpd/conf/httpd.conf | grep php5_module.conf`
    if [[ -z $IS_DISABLED ]]; then
      echo -e 'application/x-httpd-php5                php php5' >> /etc/httpd/conf/mime.types
      sed -i '/LoadModule dir_module modules\/mod_dir.so/a\LoadModule php5_module modules\/libphp5.so' /etc/httpd/conf/httpd.conf
      echo -e '\n# Use for PHP 5.x:\nInclude conf/extra/php5_module.conf\n\nAddHandler php5-script php' >> /etc/httpd/conf/httpd.conf
      #  libphp5.so included with php-apache does not work with mod_mpm_event (FS#39218). You'll have to use mod_mpm_prefork instead
      replace_line 'LoadModule mpm_event_module modules/mod_mpm_event.so' 'LoadModule mpm_prefork_module modules/mod_mpm_prefork.so' /etc/httpd/conf/httpd.conf
      replace_line 'DirectoryIndex\ index.html' 'DirectoryIndex\ index.html\ index.php' /etc/httpd/conf/httpd.conf
    fi
  } #}}}
  configure_php_nginx(){ #{{{
    if [[ -f /etc/nginx/nginx.conf.pacnew ]]; then
      mv -v /etc/nginx/nginx.conf.pacnew /etc/nginx/nginx.conf
      rm -v /etc/nginx/nginx.conf.aui
    fi
    [[ -f /etc/nginx/nginx.conf.aui ]] && cp -v /etc/nginx/nginx.conf.aui /etc/nginx/nginx.conf || cp -v /etc/nginx/nginx.conf /etc/nginx/nginx.conf.aui
    sed -i -e '/location ~ \.php$ {/,/}/d' /etc/nginx/nginx.conf
    sed -i -e '/pass the PHP/a\        #\n        location ~ \.php$ {\n            fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n            fastcgi_index  index.php;\n            root           /srv/http;\n            include        fastcgi.conf;\n        }' /etc/nginx/nginx.conf
  } #}}}
  create_sites_folder(){ #{{{
    [[ ! -f  /etc/httpd/conf/extra/httpd-userdir.conf.aui ]] && cp -v /etc/httpd/conf/extra/httpd-userdir.conf /etc/httpd/conf/extra/httpd-userdir.conf.aui
    replace_line 'public_html' 'Sites' /etc/httpd/conf/extra/httpd-userdir.conf
    su - ${username} -c "mkdir -p ~/Sites"
    su - ${username} -c "chmod o+x ~/ && chmod -R o+x ~/Sites"
    print_line
    echo "The folder \"Sites\" has been created in your home"
    echo "You can access your projects at \"http://localhost/~username\""
    pause_function
  } #}}}
  print_title "WEB SERVER - https://wiki.archlinux.org/index.php/LAMP|LAPP"
  print_info "*Adminer is installed by default in all options"
  echo " 1) LAMP - APACHE, MariaDB & PHP"
  echo " 2) LAPP - APACHE, POSTGRESQL & PHP"
  echo " 3) LEMP - NGINX, MariaDB & PHP"
  echo " 4) LEPP - NGINX, POSTGRESQL & PHP"
  echo ""
  echo " b) BACK"
  echo ""
  read_input $WEBSERVER
  case "$OPTION" in
    1)
      package_install "apache php php-apache php-mcrypt php-gd"
      install_mariadb
      install_adminer
      system_ctl enable httpd.service
      configure_php_apache
      configure_php "mariadb"
      create_sites_folder
      ;;
    2)
      package_install "apache php php-apache php-pgsql php-gd"
      install_postgresql
      install_adminer
      system_ctl enable httpd.service
      configure_php_apache
      configure_php "postgresql"
      create_sites_folder
      ;;
    3)
      package_install "nginx php php-mcrypt php-fpm"
      install_mariadb
      system_ctl enable nginx.service
      system_ctl enable php-fpm.service
      configure_php_nginx
      configure_php "mariadb"
      ;;
    4)
      package_install "nginx php php-fpm php-pgsql"
      install_postgresql
      system_ctl enable nginx.service
      system_ctl enable php-fpm.service
      configure_php_nginx
      configure_php "postgresql"
      ;;
  esac
}
#}}}
#IME INPUT TOOLS {{{
choose_ime_m17n(){
  while true	
  do	
    print_title "M17n based IME - Input scripts (such as the Indic ones) using m17n maps - https://wiki.archlinux.org/index.php/Internationalization"
    echo " 1) $(menu_item "fcitx")"	
    echo " 2) $(menu_item "ibus")"	
    echo ""	
    echo " b) BACK"	
    echo ""	
    IME_OPTIONS+=" b"
    read_input_options "IME_OPTIONS"
    for OPT in ${OPTIONS[@]}; do	
      case "$OPT" in	
        1)	
          package_install "fcitx"
          package_install "fcitx-m17n"
          package_install "fcitx-qt4"
          package_install "fcitx-qt5"
          package_install "fcitx-gtk2"
          package_install "fcitx-gtk3"
          package_install "kcm-fcitx"
          package_install "fcitx-configtool"
          echo -e '#!/bin/sh\n\n\n# Identify fcitx as a input module for both GTK and QT apps\nXMODIFIERS=@im=fcitx\nGTK_IM_MODULE=fcitx\nQT_IM_MODULE=fcitx\n\nexport XMODIFIERS GTK_IM_MODULE QT_IM_MODULE\necho we set XMODIFIERS GTK_IM_MODULE QT_IM_MODULE in profile.d\n' > /etc/profile.d/ime.sh
          # echo -e '#!/bin/sh\n\n\n# Identify fcitx as a input module for both GTK and QT apps\nXMODIFIERS=@im=fcitx\nGTK_IM_MODULE=fcitx\nQT_IM_MODULE=fcitx\n\nexport XMODIFIERS GTK_IM_MODULE QT_IM_MODULE\necho we set XMODIFIERS GTK_IM_MODULE QT_IM_MODULE in xprofile\n' > /etc/xprofile
          ;;
        2)	
          package_install "ibus"
          package_install "ibus-m17n"
          package_install "ibus-qt"
          echo -e '#!/bin/sh\n\n\n# Identify ibus as a input module for both GTK and QT apps\nXMODIFIERS=@im=ibus\nGTK_IM_MODULE=ibus\nQT_IM_MODULE=ibus\n\nexport XMODIFIERS GTK_IM_MODULE QT_IM_MODULE\necho we set XMODIFIERS GTK_IM_MODULE QT_IM_MODULE in profile.d\n' > /etc/profile.d/ime.sh
          ;;
        "b")
          break	
          ;;	
        *)	
          invalid_option	
          ;;	
      esac	
    done	
    source sharedfuncs_elihw	
  done	
}	
#}}}
#CLEAN ORPHAN PACKAGES {{{
clean_orphan_packages(){
  print_title "CLEAN ORPHAN PACKAGES"
  pacman -Rsc --noconfirm $(pacman -Qqdt)
  #pacman -Sc --noconfirm
  pacman-optimize
}
#}}}
#EXTRA {{{
install_extra(){
  while true
  do
    print_title "EXTRA"
    echo " 1) Global Menu $AUR"
    echo " 2) $(menu_item "profile-sync-daemon") $AUR"
    echo ""
    echo " b) BACK"
    echo ""
    EXTRA_OPTIONS+=" b"
    read_input_options "$EXTRA_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          aur_package_install "gtk2-appmenu gtk3-appmenu"
          if [[ ${KDE} -eq 1 ]]; then
            aur_package_install "appmenu-qt appmenu-gtk"
            aur_package_install "kdeplasma-applets-menubar"
          fi
          if [[ ! -f /home/${username}/.config/gtk-3.0/settings.ini ]]; then
            run_as_user "echo -e \"[Settings]\ngtk-shell-shows-menubar = 1\" > /home/${username}/.config/gtk-3.0/settings.ini"
          else
            add_line "gtk-shell-shows-menubar = 1" "/home/${username}/.config/gtk-3.0/settings.ini"
          fi
          ;;
        2)
          aur_package_install "profile-sync-daemon"
          run_as_user "psd"
          run_as_user "$EDITOR /home/${username}/.config/psd/psd.conf"
          run_as_user "systemctl --user enable psd.service"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    source sharedfuncs_elihw
  done
}
#}}}
#FINISH {{{
finish(){
  print_title "WARNING: PACKAGES INSTALLED FROM AUR"
  print_danger "List of packages not officially supported that may kill your cat:"
  pause_function
  AUR_PKG_LIST="${AUI_DIR}/aur_pkg_list.log"
  pacman -Qm | awk '{print $1}' > $AUR_PKG_LIST
  less $AUR_PKG_LIST
  print_title "INSTALL COMPLETED"
  echo -e "Thanks for using the Archlinux Ultimate Install script by helmuthdu\n"
  #REBOOT
  read -p "Reboot your system [y/N]: " OPTION
  [[ $OPTION == y ]] && reboot
  exit 0
}
#}}}

welcome
check_root
check_archlinux
check_hostname
check_connection
check_pacman_blocked
check_multilib
pacman_key
system_update
language_selector
configure_sudo
select_user
choose_aurhelper

  print_title "ARCHLINUX INSTALL - https://github.com/helmuthdu/aui"
  print_warning "USERNAME: ${username}"
  echo " 1) $(mainmenu_item "${checklist[1]}" "Basic Setup")"
  echo " 2) $(mainmenu_item "${checklist[2]}" "Desktop Environment|Window Manager")"
  echo " 3) $(mainmenu_item "${checklist[3]}" "Accessories Apps")"
  echo " 4) $(mainmenu_item "${checklist[4]}" "Development Apps")"
  echo " 5) $(mainmenu_item "${checklist[5]}" "Office Apps")"
  echo " 6) $(mainmenu_item "${checklist[6]}" "System Apps")"
  echo " 7) $(mainmenu_item "${checklist[7]}" "Graphics Apps")"
  echo " 8) $(mainmenu_item "${checklist[8]}" "Internet Apps")"
  echo " 9) $(mainmenu_item "${checklist[9]}" "Audio Apps")"
  echo "10) $(mainmenu_item "${checklist[10]}" "Video Apps")"
  echo "11) $(mainmenu_item "${checklist[13]}" "Fonts")"
  echo "12) $(mainmenu_item "${checklist[14]}" "International script input: M17n based IME")"
  echo "13) $(mainmenu_item "${checklist[15]}" "Extra")"
  echo "14) $(mainmenu_item "${checklist[16]}" "Clean Orphan Packages")"
  #Basic Setup
        add_custom_repositories
        install_basic_setup
        install_sound
        install_zsh
        install_ssh
        install_nfs
        install_samba
        install_tlp
        enable_readahead
        install_zram
        install_video_cards
        install_xorg
        font_config
        install_cups
        install_additional_firmwares
        checklist[1]=1
  #Desktop Environment|Window Manager
        install_display_manager
        install_nm_wicd
        install_usb_modem
        checklist[2]=1
  #Accessories Apps
        install_accessories_apps
        checklist[3]=1
  #Development Apps
        install_development_apps
        checklist[4]=1
  #Office Apps
        install_office_apps
        checklist[5]=1
  #System Apps
        install_system_apps
        checklist[6]=1

        install_graphics_apps
        checklist[7]=1

        install_internet_apps
        checklist[8]=1

        install_audio_apps
        checklist[9]=1

        install_video_apps
        checklist[10]=1
        
        install_arcolinux
        install_fonts
        checklist[11]=1

        choose_ime_m17n
        checklist[12]=1

        install_extra
        checklist[13]=1

        clean_orphan_packages
        checklist[14]=1
#}}}
